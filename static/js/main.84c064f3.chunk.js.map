{"version":3,"sources":["App.jsx","index.jsx"],"names":["SORT_BY_ALPHABET","SORT_BY_LENGTH","goodsFromServer","Button","onClick","className","children","type","cn","App","useState","sortField","setSortField","isReversed","setIsReversed","visibleGoods","goods","preparedGoods","sort","good1","good2","localeCompare","length","reverse","getPreparedGoods","handleSort","sortType","map","good","ReactDOM","render","document","getElementById"],"mappings":"iPAKMA,EAAmB,sBACnBC,EAAiB,iBAEjBC,EAAkB,CACtB,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UA0BIC,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,UAAWC,EAAvB,EAAuBA,SAAvB,OACb,wBACEC,KAAK,SACLF,UAAWG,IAAG,kBAAD,OAAmBH,IAChCD,QAASA,EAHX,SAKGE,KAIQG,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACMC,EApCiB,SAACC,EAAD,GAAuC,IAA7BL,EAA4B,EAA5BA,UAAWE,EAAiB,EAAjBA,WACxCI,EAAa,YAAOD,GAexB,OAbIL,IACFM,EAAgBA,EAAcC,MAAK,SAACC,EAAOC,GACzC,OAAQT,GACN,KAAKX,EACH,OAAOmB,EAAME,cAAcD,GAC7B,KAAKnB,EACH,OAAOkB,EAAMG,OAASF,EAAME,OAC9B,QACE,OAAO,OAKXT,EACKI,EAAcM,UAGhBN,EAgBcO,CAAiBtB,EAAiB,CACrDS,YAAWE,eAGPY,EAAa,SAACC,GAClBd,EAAac,IAAaf,EAAY,GAAKe,IAU7C,OACE,sBAAKrB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,cAAC,EAAD,CACEA,UAAWM,IAAcX,EAAmB,WAAa,GACzDI,QAAS,kBAAMqB,EAAWzB,IAF5B,iCAOA,cAAC,EAAD,CACEK,UAAWM,IAAcV,EAAiB,WAAa,GACvDG,QAAS,kBAAMqB,EAAWxB,IAF5B,4BAOA,cAAC,EAAD,CACEI,UAAYQ,EAA0B,GAAb,WACzBT,QAAS,kBAAMU,GAAeD,IAFhC,sBAOEF,GAAaE,IACb,cAAC,EAAD,CACER,UAAU,qBACVD,QAlCW,YACfO,GAAaE,KACfD,EAAa,IACbE,GAAc,KA6BV,sBASJ,6BACGC,EAAaY,KAAI,SAAAC,GAAI,OACpB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YCzGnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.84c064f3.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\nimport cn from 'classnames';\n\nconst SORT_BY_ALPHABET = 'Sort alphabetically';\nconst SORT_BY_LENGTH = 'Sort by length';\n\nconst goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst getPreparedGoods = (goods, { sortField, isReversed }) => {\n  let preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods = preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_BY_ALPHABET:\n          return good1.localeCompare(good2);\n        case SORT_BY_LENGTH:\n          return good1.length - good2.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    return preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n};\n\nconst Button = ({ onClick, className, children }) => (\n  <button\n    type=\"button\"\n    className={cn(`button is-info ${className}`)}\n    onClick={onClick}\n  >\n    {children}\n  </button>\n);\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReversed, setIsReversed] = useState(false);\n  const visibleGoods = getPreparedGoods(goodsFromServer, {\n    sortField, isReversed,\n  });\n\n  const handleSort = (sortType) => {\n    setSortField(sortType === sortField ? '' : sortType);\n  };\n\n  const resetSorting = () => {\n    if (sortField || isReversed) {\n      setSortField('');\n      setIsReversed(false);\n    }\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <Button\n          className={sortField !== SORT_BY_ALPHABET ? 'is-light' : ''}\n          onClick={() => handleSort(SORT_BY_ALPHABET)}\n        >\n          Sort alphabetically\n        </Button>\n\n        <Button\n          className={sortField !== SORT_BY_LENGTH ? 'is-light' : ''}\n          onClick={() => handleSort(SORT_BY_LENGTH)}\n        >\n          Sort by length\n        </Button>\n\n        <Button\n          className={!isReversed ? 'is-light' : ''}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </Button>\n\n        {(sortField || isReversed) && (\n          <Button\n            className=\"is-danger is-light\"\n            onClick={resetSorting}\n          >\n            Reset\n          </Button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}